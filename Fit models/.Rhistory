windows()
plot(0,0,type = "p",col='white',
ylim=range(PyMat),xlim = c(0,nSample))
for (i in 1:nOut){
ind = X[2:(nSample-2)]==i
lines(sampleInd[ind],PyMat[2,ind],type = "l",col=colVect[i])
}#this shows the uncertainty on the prediction
#x[t+1]=3 given that x[t]=i for i=1:4
sampleInd = 1:(nSample-3);
windows()
plot(0,0,type = "p",col='white',
ylim=range(PyMat),xlim = c(0,nSample))
for (i in 1:nOut){
ind = X[2:(nSample-2)]==i
lines(sampleInd[ind],meanErr[ind],type = "l",col=colVect[i])
}#this shows the uncertainty on the prediction
#x[t+1]=3 given that x[t]=i for i=1:4
sampleInd = 1:(nSample-3);
windows()
plot(0,0,type = "p",col='white',
ylim=range(PyMat),xlim = c(0,nSample))
for (i in 1:nOut){
ind = X[2:(nSample-2)]==i
lines(sampleInd[ind],meanErr[ind],type = "l",col=colVect[i])
}#this shows the uncertainty on the prediction
#x[t+1]=3 given that x[t]=i for i=1:4
#===examine error===
windows()
plot(0,0,type = "p",col='white',
ylim=range(PyMat),xlim = c(0,nSample))
for (i in 1:nOut){
ind = X[2:(nSample-2)]==i
lines(sampleInd[ind],PyMat[2,ind],type = "l",col=colVect[i])
}#this shows the uncertainty on the prediction
#x[t+1]=3 given that x[t]=i for i=1:4
#===examine error===
plot(trainedNet$maxK)
plot(trainedNet$maxK,type='l')
windows();plot(trainedNet$maxK,type='l')
length(trainedNet$maxK)
windows();plot(trainedNet$maxK,type='l')
install.packages(neuralnet)
install.packages('neuralnet')
library(neuralnet)
attach(infert)
nn <- neuralnet(case~age+parity+induced+spontaneous,data=infert, size=2, entropy=T,abstol=0.01)
nn <- neuralnet(case~age+parity+induced+spontaneous,data=infert, size=2)
nn <- neuralnet(case~age+parity+induced+spontaneous,data=infert)
plot(nn)
window()
windows()
plot(nn)
windows()
plot(nn)
nn <- neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden = c(4,2))
nn <- neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden = c(4,2))
windows()
plot(nn)
0.2989 * R + 0.5870 * G + 0.1140 * B
R=223;G=136;B=126;
0.2989 * R + 0.5870 * G + 0.1140 * B
R=126;G=136;B=223;
0.2989 * R + 0.5870 * G + 0.1140 * B
y=c(34.7,22.8,23.2,29.4,8.3)
y*t(y)
y%*%t(y)
y
t(y)%*%y
theta = c(.84,.04,.18,.45)
x=matrix(c(1,.027,0,7.07,1,.1,0,10.01))
x
x=matrix(c(1,.027,0,7.07,1,.1,0,10.01),nrow = 4)
x
y=c(34.7,22.8)
theta %*% x
theta %*% x - y
sum((theta %*% x - y)^2)
theta
y
x
sum((theta %*% x - y)^2)/2
(theta %*% x[,1] - y[1])
(theta %*% x[,1] - y[1]) * x[,1]
library(alr4)
source('~/.active-rstudio-document', echo=TRUE)
head(ftcollinssnow)
head(ftcollinstemp)
M
M = lm(winter~fall,data=ftcollinstemp)
summary(M)
sum((M$residuals^2)/M$df.residual)
M$df.residual
dim(ftcollinstemp)
xBar=mean(ftcollinstemp$fall)
Sxx = sum((ftcollinstemp$fall-xBar)^2)
Sxx
sigma2=sum((M$residuals^2)/M$df.residual)
0.3132/sqrt(sigma2/Sxx)
t=0.3132/sqrt(sigma2/Sxx)
qt(t)
qt(t,109)
qt(t,10)
t
2*(1-pt(t,109))
var(ftcollinstemp$winter)*(110)
yBar = mean(ftcollinstemp$winter)
Syy = sum((ftcollinstemp$winter-yBar)^2)
Syy
N = length(ftcollinstemp$winter)
(Syy = var(ftcollinstemp$winter)*(N-1))
summary(M)
s=summary(M)
s$sigma
summary(M)$sigma
N = length(ftcollinstemp$winter)
(Syy = var(ftcollinstemp$winter)*(N-1))
(RSS = (summary(M)$sigma)*(N-2))
(Sreg = Syy - RSS)
Sreg/Syy
N = length(ftcollinstemp$winter)
(Syy = var(ftcollinstemp$winter)*(N-1))
(RSS = (summary(M)$sigma^2)*(N-2))
(Sreg = Syy - RSS)
Sreg/Syy
N = length(ftcollinstemp$winter)
(Syy = var(ftcollinstemp$winter)*(N-1))
(RSS = (summary(M)$sigma^2)*(N-2))
(Sreg = Syy - RSS)
Sreg/Syy
Syy
sel=with(data=ftcollinstemp,year<1990)
sel
ftcollinstemp
sum(sel)
ind1 = with(data = ftcollinstemp,year<1990)
data1 = ftcollinstemp[ind1,]
ind2 = with(data = ftcollinstemp,year>=1990)
data2 = ftcollinstemp[ind2,]
data1
data2
ind1 = with(data = ftcollinstemp,year<1990)
data1 = ftcollinstemp[ind1,]
M1 = lm(winter~fall,data=data1)
plot(winter~fall,data=data1)
abline(M1,col="red")
ind2 = with(data = ftcollinstemp,year>=1990)
data2 = ftcollinstemp[ind2,]
M2 = lm(winter~fall,data=data2)
plot(winter~fall,data=data2)
abline(M2,col="red")
ind1 = with(data = ftcollinstemp,year<1990)
data1 = ftcollinstemp[ind1,]
M1 = lm(winter~fall,data=data1)
plot(winter~fall,data=data1)
abline(M1,col="red")
summary(M1)
ind2 = with(data = ftcollinstemp,year>=1990)
data2 = ftcollinstemp[ind2,]
M2 = lm(winter~fall,data=data2)
plot(winter~fall,data=data2)
abline(M2,col="red")
summary(M2)
plot(winter~fall,data=ftcollinstemp)
with(ftcollinstemp, lines(lowess(winter ~ fall, f=6/10, iter=1), lty=2))
with(ftcollinstemp, lines(lowess(winter ~ fall, f=1/10, iter=1), lty=2))
with(ftcollinstemp, lines(lowess(winter ~ fall, f=9/10, iter=1), lty=2))
plot(winter~fall,data=ftcollinstemp)
with(ftcollinstemp, lines(lowess(winter ~ fall, f=9/10, iter=1), lty=2))
summary(M1)
summary(M2)
head(UN11)
M = lm(log(fertility)~log(ppgdp))
summary(M)
M = lm(log(fertility)~log(ppgdp),data = UN11)
summary(M)
M = lm(log(fertility)~log(ppgdp),data = UN11)
summary(M)
predict(M,newdata = data.frame(ppgdp=c(1000)),interval = "prediction",level=.95)
sigma2=sum((M$residuals^2)/M$df.residual)
sigma2
summary(M)
sqrt(sigma2)
sigma2*(1+(1/))
dim(UN11)
sigma2*(1+(1/199)+)
Sxx=var(log(UN11$ppgdp))*(198)
Sxx
xBar=mean(log(UN11$ppgdp))
sigma2*(1+(1/199)+(1000-xBar)/Sxx)
qt(.95)
qt(.95,197)
predict(M,newdata = data.frame(ppgdp=c(1000)),interval = "prediction",level=.95)
qt(.975,197)
1.234567+1.972079*sqrt(0.2894305)
sigma2*(1+(1/199)+((1000-xBar)^2)/Sxx)
sigma2*(1+(1/199)+((log(1000)-xBar)^2)/Sxx)
1.234567+1.972079*sqrt(0.0952667)
1.234567-1.972079*sqrt(0.0952667)
y=predict(M,newdata = data.frame(ppgdp=c(1000)),interval = "prediction",level=.95)
y
y$fit
y[1]
(exp(y))
max(UN11$fertility)
which.max(UN11$fertility)
windows();plot(UN11$fertility)
indM = which.max(UN11$fertility)
UN11$region[132]
UN11$group[132]
head(UN11)
UN11.names()
names(UN11)
row.names(UN11)
row.names(UN11)[indM]
indM = which.max(UN11$fertility)
(row.names(UN11)[indM])
indM = which.min(UN11$fertility)
(row.names(UN11)[indM])
a=randu(3)
a=randu
runif(3)
a=runif(3)
a
order(a)
order(-a)
ind=order(a)
ind
ind=order(M$residuals)
ind
M = lm(log(fertility)~log(ppgdp),data = UN11)
ind=order(M$residuals)
View(M$residuals)
View(as.matrix(M$residuals))
windows();plot(M$residuals)
ind=order(-M$residuals)
ind[1]
ind[2]
row.names(M$residuals)[ind[1]]
row.names(M$residuals)[1]
row.names(M$residuals)
(row.names(M$residuals))
(row.names(UN11)[ind[1]])
ind = order(M$residuals)
(row.names(UN11)[ind[1:2]])
ind = order(M$residuals)
(row.names(UN11)[ind[1:2]])
(row.names(UN11)[ind[1]])
ind = order(-M$residuals)
(row.names(UN11)[ind[1:2]])
library(alr4)
head(oldfaith)
head(oldfaith)
M = lm(Interval~Duration,data = oldfaith)
plot(Interval~Duration,data = oldfaith)
abline(M,col="red")
summary(M)
predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)
qt(p = .9,df = 10)
qt(p = .95,df = 10)
predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)
M = lm(Interval~Duration,data = oldfaith)
library(alr4)
M = lm(Interval~Duration,data = oldfaith)
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)
y
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)[1]
y
M$df.residual
dim(oldfaith)
q = y + qt(p=.9,df=M$df.residual)
q
sigmaHat(M)
s=summary(M)
s$sigma
sepred = s
s = sigmaHat(M)
sepred = s*(1+(1/270)+())
xBar=mean(oldfaith$Duration)
sepred = s*(1+(1/270)+(x))
Sxx=sum((oldfaith$Duration-xBar)^2)
Sxx
sepred = s*(1+(1/270)+((250-xBar)^2)/Sxx)
sepred
sepred*qt(.975,268)
y+sepred*qt(.975,268)
y-sepred*qt(.975,268)
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)[1]
y
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)
y
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "confidence",level=.95)
y
sepred = s*sqrt(1+(1/270)+((250-xBar)^2)/Sxx)
y=predict(M,newdata = data.frame(Duration=c(250)),interval = "prediction",level=.95)[1]
y
y+sepred*qt(.975,268)
y-sepred*qt(.975,268)
(q = y + qt(p=.9,df=M$df.residual)*sepred)
require(alr4)
head(UN11)
UN11$logppgdp=log(UN11$ppgdp)
head(UN11)
pairs(~fertility+pctUrban+logppgdp)
pairs(~fertility+pctUrban+logppgdp,data=UN11)
head(fuel2001,)
head(fuel2001)
rm(UN11)
head(UN11)
UN11=transform(UN11,logppgdp=log(ppgdp))
head(UN11)
nrow(UN11)
head(water)
cor(~BSAAM+OPBPC+OPRC+OPSLAKE,data = water)
cor(water[c(BSAAM,OPBPC,OPRC,OPSLAKE)])
cor(water(c(BSAAM,OPBPC,OPRC,OPSLAKE)))
cor(water(c("BSAAM","OPBPC","OPRC","OPSLAKE")))
cor(water[c("BSAAM","OPBPC","OPRC","OPSLAKE")])
m = lm(BSAAM~OPBPC+OPRC+OPSLAKE,data = water)
summary(m)
source('~/.active-rstudio-document', echo=TRUE)
(3*66-144/12)
(3*66-100/12)
sqrt(2.5)
2.5/1.58
sqrt(10/3)
14/4
sqrt(3.5)
4/sqrt(3.5)
4+3.182*1.87
4-3.182*1.87
require(ISLR,quietly = F,warn.conflicts = F)
install.packages(glmnet)
install.packages("glmnet")
require("ISLR")
install.packages("ISLR")
require(ISLR,quietly = F,warn.conflicts = F)
require(glmnet,quietly = F,warn.conflicts = F)
library(MASS)
head(Boston)
?model.matrix()
x=model.matrix(Boston)
x=model.matrix(medv~.,Boston)
x
View(x)
head(Boston)
x=model.matrix(medv~.,Boston)[,-1]
y = with(Boston,medv[!is.na(medv)])
dim(Boston)
data = as.data.frame(cbind(y,x))
OLSmodel = lm(y~.,data = data1)
data1 = as.data.frame(cbind(y,x))
OLSmodel = lm(y~.,data = data1)
OLSmodel$coefficients
x=model.matrix(medv~.,Boston)
View(x)
x=model.matrix(medv~.,Boston)[,-1]
View(x)
?cv.glmnet()
CVmodel = cv.glmnet(x,y,alpha=0)
plot(CVmodel)
optimalLmabda = CVmodel$lambda.min
(optimalLmabda = CVmodel$lambda.min)
CVmodel = cv.glmnet(x,y,alpha=1)
plot(CVmodel)
(optimalLmabda = CVmodel$lambda.min)
log(optimalLmabda)
x=model.matrix(medv~.,Boston)[,-1]
y = with(Boston,medv[!is.na(medv)])
indTrain  = sample(1:nrow(x),nrow(x)/2)
indTest = -indTrain;
xTrain = x[indTrain,];yTrain = y[indTrain,];
dim(y)
xTrain = x[indTrain,];yTrain = y[indTrain];
xTest = x[indTest,];yTest = y[indTest];
dataTrain = as.data.frame(cbind(yTrain,xTrain))
dataTest = as.data.frame(cbind(yTest,xTest))
OLSmodel = lm(yTrain~.,data = dataTrain)
OLSmodel$coefficients
CV_Ridge = cv.glmnet(xTrain,yTrain,alpha=0)
plot(CV_Ridge)
(optLmabda_Ridge = CV_Ridge$lambda.min)
```
###(d)
CV_Lasso = cv.glmnet(x,y,alpha=1)
plot(CV_Lasso)
(optLmabda_Lasso = CV_Lasso$lambda.min)
CV_Lasso = cv.glmnet(xTrain,yTrain,alpha=1)
plot(CV_Lasso)
(optLmabda_Lasso = CV_Lasso$lambda.min)
###(e)
```{r}
y_pred_OLS = predict()
```
y_pred_OLS = predict(ridgeModel,s=0,newx = xTest,exact=T)
exp(5)
library(alr4)
(UN11$region)
levels(UN11$region)
which(UN11$region=="NorthAtlantic")
which(UN11$region=="Africa")
lm(formula = lifeExpF ~ region + group, data = UN11)
d = UN11
d = UN11[-72,]
levels(d$region)
which(UN11$region=="NorthAtlantic")
which(d$region=="NorthAtlantic")
windows();Boxplot(lifeExpF ~ region, data=d, id.n=FALSE)
d$region=as.factor(d$region)
levels(d$region)
lm(formula = lifeExpF ~ region, data = UN11)
levels(UN11$group)
lm(formula = lifeExpF ~ group*region, data = UN11)
lm(formula = lifeExpF ~ group+region, data = UN11)
a=model.matrix(~-1group+region,UN11)
a=model.matrix(~-1+group+region,UN11)
apply(a,2,sum)
a=model.matrix(~group+region,UN11)
apply(a,2,sum)
windows();scatterplot(UN11$region,UN11$group)
windows();scatterplot(as.numeric(UN11$region),as,numUN11$group)
windows();scatterplot(as.numeric(UN11$region),as,numeric(UN11$group))
as.integer(UN11$region)
windows();scatterplot(as.numeric(UN11$region),as.numeric(UN11$group))
windows();plot(as.numeric(UN11$region),as.numeric(UN11$group))
windows();plot(as.numeric(UN11$region),as.numeric(UN11$group)+runif(length(UN11$group)))
windows();plot(as.numeric(UN11$region),as.numeric(UN11$group)+runif(length(UN11$group),0,.3))
levels(UN11$group)
levels(UN11$region)
2.33-.75
64/25
sqrt(64/25)
6/1.6
2.33*1.6
library(alr4)
str(physics)
str(physics1)
str(physics1)
plot(y~x,data = physics1)
lines(m)
m = lm(y~x , data = physics1, weights = 1/SD^2)
summary(m)
plot(y~x,data = physics1)
lines(m)
ablines(m)
abline(m)
str(salarygov)
str(stopping)
m = lm(Distance~Speed,data = stopping)
plot(Distance~Speed,data = stopping)
windows()
plot(Distance~Speed,data = stopping)
abline(m)
m1 = lm(Distance~Speed+I(Speed^2),data = stopping)
abline(m1)
line(m1)
line(Distance~m1$coefficients[0])
line(Distance~m1$coefficients[0],data = stopping)
attach(stopping)
y = m1$coefficients[0] + m1$coefficients[1]*Speed + m1$coefficients[2]*(Speed^2)
line(Speed,y)
lingth(y)
length(y)
idm(y)
dim(y)
y
m1$coefficients[0]
m1$coefficients
m1$coefficients[1]
y = m1$coefficients[1] + m1$coefficients[2]*Speed + m1$coefficients[3]*(Speed^2)
line(Speed,y)
Speed
y
length(Speed)
length(y)
plot(Speed,y)
lines(Speed,y)
plot(y~x,data = physics1)
lines(Speed,y)
plot(y~x,data = physics1)
windows()
plot(y~x,data = physics1)
lines(Speed,y)
plot(Distance~Speed,data = stopping)
windows()
plot(Distance~Speed,data = stopping)
lines(Speed,y)
1/16
a=c(5,3,4,4,5)
mean(a)
std(a)
sd(a)
4.2/(sd(a)/sqrt(5))
qt(.975,4)
sd(a)/sqrt(5)
4.2+.374*2.78
4.2-.374*2.78
sum(c(14,7,3)^2)
(3*254-24*24)/6
24*24
3*254
qf(.05,2,33)
qf(.95,2,33)
(11*18)/38
(17*18)/38
(10*18)/38
(c(11,17,10)*20)/38
O=c(9,5,4,2,12,6)
E=c(5.2,8.05,4.74,5.79,8.95,5.26)
sum(((O-E)^2)/E)
qchisq(.95,2)
qchisq(.99,2)
setwd("C:/Users/arakhoda/Dropbox/Projects/Psychology/Learning in SMDP tasks/Experiments/Canoe/AnalyseAndFit/Fit models")
